program = code

code = statement*

statement = "let" _ variable_dec:variable_declaration { return variable_dec; }
          / assignment
          / expr:expr _ { return expr; }

variable_declaration  = dec:(decl ("," decl)*) { return {type: "variable_dec", declarations: dec.filter(d => !!d.type)} }

decl = name:identifier _ "=" expr:expr { return {type: "assignment", name, expr}; }
      / name:identifier { return {type: "assignment", name}; }

identifier = pattern:([a-z][a-zA-Z0-9]*) { return text(pattern); }

variable_reference = name:identifier { return {type: "identifier", name}; }

if_expression = expr brace_block ( "else" brace_block )?

assignment  = _ name:identifier _ "=" expr:expr { return {type: "assignment", name, expr}; }

expr  = "fn" function_definition
      / "if" if_expression
      / arithmetic_expression
      / boolean_expression

boolean_expression  = arithmetic_expression relop arithmetic_expression

arithmetic_expression  = pattern:(mult_term addop arithmetic_expression) { return {type: "arithmetic_expr", params: pattern} }
                       / mult_term

mult_term  = pattern:(primary mulop mult_term) { return {type: "arithmetic_expr", params: pattern}; }
           / primary

primary  = _ value:integer _ { return {type: "integer", value: value} }
         / _ fcn:function_call { return fcn; }
         / _ ref:variable_reference { return ref; }
         / "(" arithmetic_expression ")"

integer = sign:"-"? num:[0-9]+ { return sign ? Number((sign+num).replace(',','')) : Number(num.toString().replace(',',''));}

addop   =   _ op:'+' {return op;}
          / _ op:'-' {return op;}
mulop   =   '*' 
          / '/' 
relop   =   '=='
          / '!='
          / '>='
          / '>' 
          / '<='
          / '<' 

function_call  = fcn_name:"print" "(" params:call_arguments ")" { return {type: "function", fcn_name, params}; }
                  / fcn_name:variable_reference "(" params:call_arguments ")" { return {type: "function", fcn_name, params}; }

call_arguments = (expr ("," expr)*)?

function_definition = param_list brace_block

param_list =  "(" pattern:(identifier ("," identifier)*) ")" { return pattern; }
           /  "()"

brace_block = "{" code "}"

whitespace = [ \t\r\n]+
comment_chars = [. \t]*
comment = "#" comment_chars [\r\n]

_ = ( whitespace / comment )*